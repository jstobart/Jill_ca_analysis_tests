
clearvars
close all

% time windows based on stimulation
NOnsetWindow= 2; %1 for short stim % neuronal onset times
AOnsetWindow= 12; % 5 for short stim % astrocyte onset times
Fast_OnsetWindow=1.09;

NPTWindow= 9; % one second longer than stimulation for peak times
APTWindow= 15; % astrocyte longer than stimulation for peak times

stimwindow=20; % 5 s baseline, 15 s imaging


%% load trace data

load('D:\Data\GCaMP_RCaMP\NR1_KD\Results\FileforMatlab\old_data\74_traces_longtrials.mat');
mouse74=All_traces;

load('D:\Data\GCaMP_RCaMP\NR1_KD\Results\FileforMatlab\old_data\92_traces_longtrials.mat');
mouse92=All_traces;

load('D:\Data\GCaMP_RCaMP\NR1_KD\Results\FileforMatlab\old_data\94_traces_longtrials.mat');
mouse94=All_traces;

load('D:\Data\GCaMP_RCaMP\NR1_KD\Results\FileforMatlab\old_data\95_traces_longtrials.mat');
mouse95=All_traces;

load('D:\Data\GCaMP_RCaMP\NR1_KD\Results\FileforMatlab\old_data\96_traces_longtrials.mat');
mouse96=All_traces;

NS=vertcat(mouse74, mouse92); % non-silencing
KD=vertcat(mouse94, mouse95, mouse96); % knock down


% ONLY CONSIDER STIM DATA
for xROI=1:size(NS,1)
    NostimIdx(xROI)= strcmp(NS{xROI,6},'nostim');
end
NS_stim=NS(~NostimIdx',:);

for xROI=1:size(KD,1)
    NostimIdx(xROI)= strcmp(KD{xROI,6},'nostim');
end
KD_stim=KD(~NostimIdx',:);


for iROI=1:length(NS_stim)
    
    % make new unique trial names
    NS_stim{iROI,15}=strcat(NS_stim{iROI,5},'_',NS_stim{iROI,4},'_',NS_stim{iROI,2});
    % unique ROI names
    NS_stim{iROI,16}=strcat(NS_stim{iROI,5},'_',NS_stim{iROI,4},'_',NS_stim{iROI,2}, '_',NS_stim{iROI,1});
end

for iROI=1:length(KD_stim)
    
    % make new unique trial names
    KD_stim{iROI,15}=strcat(KD_stim{iROI,5},'_',KD_stim{iROI,4},'_',KD_stim{iROI,2});
    % unique ROI names
    KD_stim{iROI,16}=strcat(KD_stim{iROI,5},'_',KD_stim{iROI,4},'_',KD_stim{iROI,2}, '_',KD_stim{iROI,1});
end

for iROI=1:length(NS_stim)
    %if a process ROI is overlapping with a soma or process, exclude it
    %from data
    nonOverlapIdx(iROI)=~ischar(NS_stim{iROI,14});
end

% remove overlapping processes
NS_stim = NS_stim(nonOverlapIdx',:);

for iROI=1:length(KD_stim)
    %if a process ROI is overlapping with a soma or process, exclude it
    %from data
    nonOverlapIdx2(iROI)=~ischar(KD_stim{iROI,14});
end

% remove overlapping processes
KD_stim = KD_stim(nonOverlapIdx2',:);


%%
% Calculate the first peak onset time after stim

% peak onsets and AUC in the first second after stim for each ROI
for iROI= 1:length(NS_stim)
    
    trace=NS_stim{iROI,8};
    FrameRate=NS_stim{iROI,11};
    nframes=length(trace);
    TimeX(1:nframes) = (1:nframes)/FrameRate;
    BL_time=4.92;
    baselineCorrectedTime=TimeX-BL_time;
    
    
    % onset time
    Onsets=find_first_onset_time(baselineCorrectedTime(10:end), trace(10:end),2.5,2);
    if isempty(Onsets)
        Onsets=nan(1,1);
    end
    NS_stim{iROI, 17}= Onsets;
    
end


% peak onsets and AUC in the first second after stim for each ROI
for iROI= 1:length(KD_stim)
    
    trace=KD_stim{iROI,8};
    FrameRate=KD_stim{iROI,11};
    nframes=length(trace);
    TimeX(1:nframes) = (1:nframes)/FrameRate;
    BL_time=4.92;
    baselineCorrectedTime=TimeX-BL_time;
    
    
    % onset time
    Onsets=find_first_onset_time(baselineCorrectedTime(10:end), trace(10:end),2.5,2);
    if isempty(Onsets)
        Onsets=nan(1,1);
    end
    KD_stim{iROI, 17}= Onsets;
    
end


%% Mean Traces- Lck Control Data

% ROI with a response to stimulation from non-silencing

nframes2=round(stimwindow*FrameRate);

for iROI=1:length(NS_stim)
    rc_str(iROI)= ~isempty(strfind(NS_stim{iROI,3},'RCaMP'));
    gc_str(iROI)= ~isempty(strfind(NS_stim{iROI,3},'GCaMP'));
end

RCaMP_NS=NS_stim(rc_str',:);
GCaMP_NS=NS_stim(gc_str',:);

OT_RCaMP_traces=[];
for iROI=1:length(RCaMP_NS)
    respOTIdx1(iROI)=~isempty(find((RCaMP_NS{iROI,17}>0 && RCaMP_NS{iROI,17}<=Fast_OnsetWindow),1));
    tempY= RCaMP_NS{iROI,8};
    BL_time=4.92;
    
    if respOTIdx1(iROI)
        OT_RCaMP_traces= horzcat(OT_RCaMP_traces, tempY);
    end
end
RrespOT=RCaMP_NS(respOTIdx1',:); % responding neurons
OT_RCaMP_mean= nanmean(OT_RCaMP_traces,2);

fastAC_traces=[];
slowAC_traces=[];
for iROI=1:length(GCaMP_NS)
    fast_respOTIdx2(iROI)=~isempty(find((GCaMP_NS{iROI,17}>0 && GCaMP_NS{iROI,17}<=Fast_OnsetWindow),1));
    delayed_respOTIdx2(iROI)=~isempty(find((GCaMP_NS{iROI,17}>Fast_OnsetWindow && GCaMP_NS{iROI,17}<=AOnsetWindow),1));
    tempY= GCaMP_NS{iROI,8};
    BL_time=4.92;
    if fast_respOTIdx2(iROI)
        fastAC_traces= horzcat(fastAC_traces, tempY);
    end
    if delayed_respOTIdx2(iROI)
        slowAC_traces= horzcat(slowAC_traces, tempY);
    end
end

fastAC=GCaMP_NS(fast_respOTIdx2',:); % fast responding astrocytes
delayedAC=GCaMP_NS(delayed_respOTIdx2',:); % delayed responding astrocytes

GrespOT =vertcat(fastAC,delayedAC);
% mean trace of astrocytes
fastAC_mean= nanmean(fastAC_traces,2);
slowAC_mean= nanmean(slowAC_traces,2);



%% shaded error bar with
green=[(27/255) (120/255) (55/255)];
purple=[(123/255) (50/255) (148/255)];
blue= [(0/255) (114/255) (178/255)];

% SEM calculations
fastAC_SDTrace = nanstd(fastAC_traces');
fastAC_SEM=fastAC_SDTrace/sqrt(size(fastAC_traces,2));

slowAC_SDTrace = nanstd(slowAC_traces');
slowAC_SEM=slowAC_SDTrace/sqrt(size(slowAC_traces,2));

RC_SDTrace = nanstd(OT_RCaMP_traces');
RC_SEM=RC_SDTrace/sqrt(size(OT_RCaMP_traces,2));

figure('name', 'non-silencing means- plus SEM')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

%ylim([-0.2 3]);
lineProps.col = {blue};
mseb(TimeX,slowAC_mean',slowAC_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX,(fastAC_mean'+0.75),fastAC_SEM,lineProps)
lineProps.col = {purple};
mseb(TimeX,(OT_RCaMP_mean'+2),RC_SEM,lineProps)

% H2=shadedErrorBar(TimeX,(fastAC_mean+0.75),fastAC_SEM)%,green,1);
% H3=shadedErrorBar(TimeX,(OT_RCaMP_mean+2),RC_SEM)%,purple,1);
rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)

%% mean traces for knockdown
for iROI=1:length(KD_stim)
    rc_str2(iROI)= ~isempty(strfind(KD_stim{iROI,3},'RCaMP'));
    gc_str2(iROI)= ~isempty(strfind(KD_stim{iROI,3},'GCaMP'));
end

RCaMP_KD=KD_stim(rc_str2',:);
GCaMP_KD=KD_stim(gc_str2',:);

OT_RCaMP_traces=[];
for iROI=1:length(RCaMP_KD)
    respOTIdx2(iROI)=~isempty(find((RCaMP_KD{iROI,17}>0 && RCaMP_KD{iROI,17}<=Fast_OnsetWindow),1));
    tempY= RCaMP_KD{iROI,8};
    BL_time=4.92;
    
    if respOTIdx2(iROI)
        OT_RCaMP_traces= horzcat(OT_RCaMP_traces, tempY);
    end
end
RrespOT2=RCaMP_KD(respOTIdx2',:); % responding neurons
OT_RCaMP_mean2= nanmean(OT_RCaMP_traces,2);

fastAC_traces=[];
slowAC_traces=[];
for iROI=1:length(GCaMP_KD)
    fast_respOTIdx3(iROI)=~isempty(find((GCaMP_KD{iROI,17}>0 && GCaMP_KD{iROI,17}<=Fast_OnsetWindow),1));
    delayed_respOTIdx3(iROI)=~isempty(find((GCaMP_KD{iROI,17}>Fast_OnsetWindow && GCaMP_KD{iROI,17}<=AOnsetWindow),1));
    tempY= GCaMP_KD{iROI,8};
    BL_time=4.92;
    if fast_respOTIdx3(iROI)
        fastAC_traces= horzcat(fastAC_traces, tempY);
    end
    if delayed_respOTIdx3(iROI)
        slowAC_traces= horzcat(slowAC_traces, tempY);
    end
end

fastAC2=GCaMP_KD(fast_respOTIdx3',:); % fast responding astrocytes
delayedAC2=GCaMP_NS(delayed_respOTIdx3',:); % delayed responding astrocytes

GrespOT2 =vertcat(fastAC2,delayedAC2);
% mean trace of astrocytes
fastAC_mean2= nanmean(fastAC_traces,2);
slowAC_mean2= nanmean(slowAC_traces,2);


% SEM calculations
fastAC_SDTrace2 = nanstd(fastAC_traces');
fastAC_SEM2=fastAC_SDTrace2/sqrt(size(fastAC_traces,2));

slowAC_SDTrace2 = nanstd(slowAC_traces');
slowAC_SEM2=slowAC_SDTrace2/sqrt(size(slowAC_traces,2));

RC_SDTrace2 = nanstd(OT_RCaMP_traces');
RC_SEM2=RC_SDTrace2/sqrt(size(OT_RCaMP_traces,2));

figure('name', 'knock down means- plus SEM')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

%ylim([-0.2 3]);
lineProps.col = {blue};
mseb(TimeX,slowAC_mean2',slowAC_SEM2,lineProps)
lineProps.col = {green};
mseb(TimeX,(fastAC_mean2'+0.75),fastAC_SEM2,lineProps)
lineProps.col = {purple};
mseb(TimeX,(OT_RCaMP_mean2'+2),RC_SEM2,lineProps)

% H2=shadedErrorBar(TimeX,(fastAC_mean+0.75),fastAC_SEM)%,green,1);
% H3=shadedErrorBar(TimeX,(OT_RCaMP_mean+2),RC_SEM)%,purple,1);
rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)


%% Data for heat maps

% sort astrocytes by onset time
[~, OT_GCidx] = sort([GrespOT{:,17}], 'ascend');
GrespOT_sort=GrespOT(OT_GCidx,:);

% sort neuronss by onset time
[~, OT_RCidx] = sort([RrespOT{:,17}], 'ascend');
RrespOT_sort=RrespOT(OT_RCidx,:);


nframes3=round(20*FrameRate);


% astrocyte table
AC_traces=[];
for xROI= 1:length(GrespOT_sort)
    tempOnset = GrespOT_sort{xROI,17}; % individual onset time
    tempY = GrespOT_sort{xROI,9}; % individual trace
    BL_time=GrespOT_sort{xROI, 8}/GrespOT_sort{xROI,13};
    if length(tempY)>(nframes3+59)
        if BL_time<6
            tempY2=tempY(1:nframes3); %(stimwindow*FrameRate));
        else
            tempY2=tempY(59:(nframes3+58));
        end
    end
    temp=vertcat(tempOnset,tempY2);
    AC_traces=vertcat(AC_traces,temp');
end

% neuronal table
N_traces=[];
for xROI= 1:length(RrespOT_sort)
    tempOnset = RrespOT_sort{xROI,17}; % individual onset time
    tempY = RrespOT_sort{xROI,9}; % individual trace
    
    BL_time=RrespOT_sort{xROI, 8}/RrespOT_sort{xROI,13};
    if length(tempY)>(nframes3+59)
        if BL_time<6
            tempY2=tempY(1:nframes3); %(stimwindow*FrameRate));
        else
            tempY2=tempY(59:(nframes3+58));
        end
    end
    temp=vertcat(tempOnset,tempY2);
    N_traces=vertcat(N_traces,temp');
end


xlswrite(AstrocyteExcelFile, AC_traces)
xlswrite(NeuronalExcelFile, N_traces)


%% Mean Traces- IP3 knockouts vs littermates

% ROI with a response to stimulation

nframes2=round(stimwindow*FrameRate);

for iROI=1:length(IP3)
    ko_str(iROI)= ~isempty(strfind(IP3{iROI,20},'KO'));
    wt_str(iROI)= ~isempty(strfind(IP3{iROI,20},'WT'));
end

IP3KO=IP3(ko_str',:);
IP3WT=IP3(wt_str',:);

% only consider GCaMP traces!
for iROI=1:length(IP3KO)
    gc_str3(iROI)= ~isempty(strfind(IP3KO{iROI,3},'GCaMP'));
end

IP3KO_GC=IP3KO(gc_str3',:);

for iROI=1:length(IP3WT)
    gc_str2(iROI)= ~isempty(strfind(IP3WT{iROI,3},'GCaMP'));
end

IP3WT_GC=IP3WT(gc_str2',:);

%knockouts
fastKO_traces=[];
slowKO_traces=[];
for iROI=1:length(IP3KO_GC)
    fast_KOIdx(iROI)=~isempty(find((IP3KO_GC{iROI,17}>0 && IP3KO_GC{iROI,17}<=Fast_OnsetWindow),1));
    slow_KOIdx(iROI)=~isempty(find((IP3KO_GC{iROI,17}>Fast_OnsetWindow && IP3KO_GC{iROI,17}<=AOnsetWindow),1));
    tempY= IP3KO_GC{iROI,9};
    BL_time=IP3KO_GC{iROI, 8}/IP3KO_GC{iROI,13};
    if length(tempY)>(nframes2+59)
        if BL_time<6
            tempY2=tempY(1:nframes2); %(stimwindow*FrameRate));
        else
            tempY2=tempY(59:(nframes2+58));
        end
        if fast_KOIdx(iROI)
            fastKO_traces= horzcat(fastKO_traces, tempY2);
        end
        if slow_KOIdx(iROI)
            slowKO_traces= horzcat(slowKO_traces, tempY2);
        end
    end
end
fastKO=IP3KO_GC(fast_KOIdx',:); % fast responding astrocytes
delayedKO=IP3KO_GC(slow_KOIdx',:); % delayed responding astrocytes

respKO =vertcat(fastKO,delayedKO);

% mean trace of KO
fastKO_mean= nanmean(fastKO_traces,2);
slowKO_mean= nanmean(slowKO_traces,2);


%wildtypes
fastWT_traces=[];
slowWT_traces=[];
for iROI=1:length(IP3WT_GC)
    fast_WTIdx(iROI)=~isempty(find((IP3WT_GC{iROI,17}>0 && IP3WT_GC{iROI,17}<=Fast_OnsetWindow),1));
    slow_WTIdx(iROI)=~isempty(find((IP3WT_GC{iROI,17}>Fast_OnsetWindow && IP3WT_GC{iROI,17}<=AOnsetWindow),1));
    tempY= IP3WT_GC{iROI,9};
    BL_time=IP3WT_GC{iROI, 8}/IP3WT_GC{iROI,13};
    if length(tempY)>(nframes2+59)
        if BL_time<6
            tempY2=tempY(1:nframes2); %(stimwindow*FrameRate));
        else
            tempY2=tempY(59:(nframes2+58));
        end
        if fast_WTIdx(iROI)
            fastWT_traces= horzcat(fastWT_traces, tempY2);
        end
        if slow_WTIdx(iROI)
            slowWT_traces= horzcat(slowWT_traces, tempY2);
        end
    end
end
fastWT=IP3WT_GC(fast_WTIdx',:); % fast responding astrocytes
delayedWT=IP3WT_GC(slow_WTIdx',:); % delayed responding astrocytes

respWT =vertcat(fastWT,delayedWT);

% mean trace of WT
fastWT_mean= nanmean(fastWT_traces,2);
slowWT_mean= nanmean(slowWT_traces,2);


%% shaded error bar with
green=[(27/255) (120/255) (55/255)];
blue= [(0/255) (114/255) (178/255)];

TimeX2(1:nframes2) = (1:nframes2)/FrameRate;

% SEM calculations
fastKO_SDTrace = nanstd(fastKO_traces');
fastKO_SEM=fastKO_SDTrace/sqrt(size(fastKO_traces,2));

slowKO_SDTrace = nanstd(slowKO_traces');
slowKO_SEM=slowKO_SDTrace/sqrt(size(slowKO_traces,2));

fastWT_SDTrace = nanstd(fastWT_traces');
fastWT_SEM=fastWT_SDTrace/sqrt(size(fastWT_traces,2));

slowWT_SDTrace = nanstd(slowWT_traces');
slowWT_SEM=slowWT_SDTrace/sqrt(size(slowWT_traces,2));


%1
figure('name', 'Knockouts fast vs delayed- plus SEM')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

%ylim([-0.2 3]);
lineProps.col = {blue};
mseb(TimeX2,slowKO_mean',slowKO_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX2,(fastKO_mean'+0.75),fastKO_SEM,lineProps)

% H2=shadedErrorBar(TimeX,(fastAC_mean+0.75),fastAC_SEM)%,green,1);
% H3=shadedErrorBar(TimeX,(OT_RCaMP_mean+2),RC_SEM)%,purple,1);
rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)


%2
figure('name', 'Wildtypes fast vs delayed- plus SEM')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

%ylim([-0.2 3]);
lineProps.col = {blue};
mseb(TimeX2,slowWT_mean',slowWT_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX2,(fastWT_mean'+1),fastWT_SEM,lineProps)

% H2=shadedErrorBar(TimeX,(fastAC_mean+0.75),fastAC_SEM)%,green,1);
% H3=shadedErrorBar(TimeX,(OT_RCaMP_mean+2),RC_SEM)%,purple,1);
rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)


%3
figure('name', 'Knockout fast vs wildtype fast')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

%ylim([-0.2 3]);
lineProps.col = {blue};
mseb(TimeX2,fastKO_mean',fastKO_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX2,(fastWT_mean'+1),fastWT_SEM,lineProps)

rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)

%4
figure('name', 'Knockout delayed vs wildtype delayed')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

%ylim([-0.2 3]);
lineProps.col = {blue};
mseb(TimeX2,slowKO_mean',slowKO_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX2,(slowWT_mean'+1),slowWT_SEM,lineProps)

rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)


%5
figure('name', 'Knockout vs wildtype, fast vs delayed')
hold on
axis off
xlim([-1 25]);
lineProps.width = 1;
lineProps.edgestyle = ':';

lineProps.col = {blue};
mseb(TimeX2,(fastKO_mean'+2),fastKO_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX2,(fastWT_mean'+3),fastWT_SEM,lineProps)
lineProps.col = {blue};
mseb(TimeX2,slowKO_mean',slowKO_SEM,lineProps)
lineProps.col = {green};
mseb(TimeX2,(slowWT_mean'+1),slowWT_SEM,lineProps)

rectangle('Position', [5 -0.3 8 4])
plot([-0.1 -0.1],[0 1], 'k','LineWidth', 1)






